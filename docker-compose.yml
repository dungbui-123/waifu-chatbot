services:
  traefik:
    image: traefik:2.9
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --entrypoints.http.address=:80
      - --providers.docker
      - --providers.docker.network=${COMPOSE_PROJECT_NAME}_client
      - --providers.docker.watch=true
      - --providers.docker.exposedbydefault=false
    ports:
      - ${PORT:-80}:80
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DOMAIN}`)
      - traefik.http.routers.traefik.service=api@internal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  api:
    image: python:3.12-slim
    restart: unless-stopped
    tty: true
    build:
      context: ./api
      dockerfile: Dockerfile
    labels:
      - traefik.enable=true
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-api.rule=Host(`${API_DOMAIN}`) && PathPrefix(`/api`)
      - traefik.http.services.${COMPOSE_PROJECT_NAME}-api.loadbalancer.server.port=8000
    environment:
      - TAVILY_API_KEY=${TAVILY_API_KEY:-tavily-secret-api-key}
    command: ['/app/.venv/bin/fastapi', 'run', 'app/main.py', '--port', '80', '--host', '0.0.0.0']
    links:
      - postgres
    depends_on:
      - traefik
      - postgres

  web:
    image: node:18-alpine
    restart: unless-stopped
    working_dir: /srv/web
    tty: true
    volumes:
      - ./web:/srv/web
    labels:
      - traefik.enable=true
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-web.rule=Host(`${WEB_DOMAIN}`)
      - traefik.http.services.${COMPOSE_PROJECT_NAME}-web.loadbalancer.server.port=3000
    links:
      - api
    depends_on:
      - traefik
      - api

  postgres:
    image: postgres:11-alpine
    restart: unless-stopped
    volumes:
      - ./.data/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
    ports:
      - ${POSTGRES_PORT:-5432}:5432
